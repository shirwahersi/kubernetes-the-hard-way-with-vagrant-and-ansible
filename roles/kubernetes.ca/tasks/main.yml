---
- name: download cfssl binary
  become: true
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
    dest: /usr/local/bin/cfssl
    mode: 0755

- name: download cfssl json binary
  become: true
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
    dest: /usr/local/bin/cfssljson
    mode: 0755

- name: create base directories
  file:
    path: "{{kube_ca_cert_path}}"
    mode: 0750
    state: directory

# Certificate Authority
## In this section you will provision a Certificate Authority that can be used to generate additional TLS certificates.
- name: Create the CA configuration file
  become: False
  template:
    src: ca-config.json.j2
    dest: "{{ kube_ca_cert_path }}/ca-config.json"
    mode: 0755

- name: Create the CA certificate signing request
  become: False
  template:
    src: ca-csr.json.j2
    dest: "{{ kube_ca_cert_path }}/ca-csr.json"
    mode: 0755

- name: generate ca
  become: False
  shell: /usr/local/bin/cfssl gencert -initca ca-csr.json | /usr/local/bin/cfssljson -bare ca
  args:
    chdir: "{{ kube_ca_cert_path }}"
    creates: "{{ kube_ca_cert_path }}/ca.pem"

# Client and Server Certificates
## In this section you will generate client and server certificates for each Kubernetes component and a client certificate for the Kubernetes admin user.

# The Admin Client Certificate -

- name: Create the admin client certificate signing request
  become: False
  template:
    src: admin-csr.json.j2
    dest: "{{ kube_ca_cert_path }}/admin-csr.json"
    mode: 0755

- name: Generate the admin client certificate and private key
  become: False
  shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile={{ kube_ca_cert_name }} admin-csr.json | /usr/local/bin/cfssljson -bare admin
  args:
    chdir: "{{ kube_ca_cert_path }}"
    creates: "{{ kube_ca_cert_path }}/admin.pem"

# The Kubelet Client Certificates

## Kubernetes uses a special-purpose authorization mode called Node Authorizer, that specifically authorizes API requests
## made by Kubelets. In order to be authorized by the Node Authorizer, Kubelets must use a credential that identifies them as
## being in the system:nodes group, with a username of system:node:<nodeName>. In this section you will create a certificate
## for each Kubernetes worker node that meets the Node Authorizer requirements.

- name: Generate a CSR for each Kubernetes worker node
  become: False
  template:
    src: worker-csr.json.j2
    dest: "{{ kube_ca_cert_path }}/{{ item }}-csr.json"
    mode: 0755
  with_items: "{{ groups['kubernetes_node'] }}"

- name: Generate a certificate and private key for each Kubernetes worker node
  become: False
  shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile={{ kube_ca_cert_name }} {{ item }}-csr.json | /usr/local/bin/cfssljson -bare {{ item }}
  args:
    chdir: "{{ kube_ca_cert_path }}"
    creates: "{{ kube_ca_cert_path }}/{{ kube_ca_cert_name }}.pem"
  with_items: "{{ groups['kubernetes_node'] }}"

# The kube-proxy Client Certificate

- name: Create the kube-proxy client certificate signing request
  become: False
  template:
    src: kube-proxy-csr.json.j2
    dest: "{{ kube_ca_cert_path }}/kube-proxy-csr.json"
    mode: 0755

- name: Generate the kube-proxy client certificate and private key
  become: False
  shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile={{ kube_ca_cert_name }} kube-proxy-csr.json | /usr/local/bin/cfssljson -bare kube-proxy
  args:
    chdir: "{{ kube_ca_cert_path }}"
    creates: "{{ kube_ca_cert_path }}/{{ kube_ca_cert_name }}.pem"

# The Kubernetes API Server Certificate
# The kubernetes-the-hard-way static IP address will be included in the list of subject alternative names for the Kubernetes
# API Server certificate. This will ensure the certificate can be validated by remote clients.
# Node Include cluster ip and Loadbalancer?

- name: Create the Kubernetes API Server certificate signing request
  become: False
  template:
    src: kubernetes-csr.json.j2
    dest: "{{ kube_ca_cert_path }}/kubernetes-csr.json"
    mode: 0755

- name: Generate the Kubernetes API Server certificate and private key
  become: False
  shell: /usr/local/bin/cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile={{ kube_ca_cert_name }} kubernetes-csr.json | /usr/local/bin/cfssljson -bare kubernetes
  args:
    chdir: "{{ kube_ca_cert_path }}"
    creates: "{{ kube_ca_cert_path }}/kubernetes.pem"
