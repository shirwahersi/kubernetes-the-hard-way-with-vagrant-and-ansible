---
- name: Create Kubernetes config directory
  file:
    path: "{{kube_conf_dir}}"
    state: directory
    mode: 0700
    owner: root
    group: root

- name: Create encryption config file
  template:
    src: encryption-config.yaml.j2
    dest: "{{kube_conf_dir}}/encryption-config.yaml"
    mode: 0600

- name: Copy Kubernetes Certificates
  copy:
    src: "{{kube_ca_conf_directory}}/{{item}}"
    dest: "{{kube_conf_dir}}/{{item}}"
    mode: 0640
    owner: root
    group: root
  with_items:
    - "{{kube_master_certificates}}"

- set_fact:
    kubernetes_version: "Kubernetes {{kube_version}}"

- set_fact:
    kubectl_version: "Client Version: {{kube_version}}"

- name: Check if kube-apiserver is installed
  command: "{{kube_bin_dir}}/kube-apiserver --version"
  ignore_errors: yes
  register: kube_apiserver_installed
  changed_when: False

- name: Check if kube-controller-manager is installed
  command: "{{kube_bin_dir}}/kube-controller-manager --version"
  ignore_errors: yes
  register: kube_controller_manager_installed
  changed_when: False

- name: Check if kube-scheduler is installed
  command: "{{kube_bin_dir}}/kube-scheduler --version"
  ignore_errors: yes
  register: kube_scheduler_installed
  changed_when: False

- name: Check if kubectl is installed
  command: "{{kube_bin_dir}}/kubectl version --client --short=true"
  ignore_errors: yes
  register: kubectl_installed
  changed_when: False

- name: Downloading kube-apiserver binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{kube_version}}/bin/linux/amd64/kube-apiserver
    timeout: 300
    dest: "{{kube_bin_dir}}"
    mode: 0755
  notify:
    - restart kube-apiserver
  when: kube_apiserver_installed.rc != 0 or kube_apiserver_installed.stdout != kubernetes_version

- name: Downloading kube-controller-manager binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{kube_version}}/bin/linux/amd64/kube-controller-manager
    timeout: 300
    dest: "{{kube_bin_dir}}"
    mode: 0755
  notify:
    - restart kube-controller-manager
  when: kube_controller_manager_installed.rc != 0 or kube_controller_manager_installed.stdout != kubernetes_version

- name: Downloading kube-scheduler binary
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{kube_version}}/bin/linux/amd64/kube-scheduler
    timeout: 300
    dest: "{{kube_bin_dir}}"
    mode: 0755
  notify:
    - restart kube-scheduler
  when: kube_scheduler_installed.rc != 0 or kube_scheduler_installed.stdout != kubernetes_version

- name: Downloading kubectl binaries
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/{{kube_version}}/bin/linux/amd64/kubectl
    dest: "{{kube_bin_dir}}"
    mode: 0755
  when: kubectl_installed.rc != 0 or kubectl_installed.stdout != kubectl_version

- name: Create systemd unit file for kube-apiserver
  template:
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd

- name: Create systemd unit file for kube-controller-manager
  template:
    src: kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd

- name: Create systemd unit file for kube-scheduler
  template:
    src: kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemd

- name: Enable and Start the Controller Services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

# TODO: Check if ClusterRole + ClusterRoleBinding are already configured

- name: Copy kube-apiserver-to-kubelet ClusterRole
  copy:
    src: "files/kube-apiserver-to-kubelet_cluster_role.yaml"
    dest: "/tmp/kube-apiserver-to-kubelet_cluster_role.yaml"
    mode: 0600
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"

- name: Copy kube-apiserver-to-kubelet ClusterRoleBinding
  copy:
    src: "files/kube-apiserver-to-kubelet_cluster_role_binding.yaml"
    dest: "/tmp/kube-apiserver-to-kubelet_cluster_role_binding.yaml"
    mode: 0600
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"

- name: Wait 300 seconds for kube-apiserver port 6443 to become open on the host
  wait_for:
    port: 6443
    delay: 5
    host: "{{hostvars[inventory_hostname]['ip']}}"
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"

- name: Wait 300 seconds for kube-apiserver port 8080 to become open on the host
  wait_for:
    port: 8080
    delay: 5
    host: "localhost"
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"

- name: Apply kube-apiserver-to-kubelet ClusterRole
  shell: "kubectl --server=127.0.0.1:8080 apply -f /tmp/kube-apiserver-to-kubelet_cluster_role.yaml"
  register: kube_apiserver_to_kubelet_cluster_role
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"

- name: Apply kube-apiserver-to-kubelet ClusterRoleBinding
  shell: "kubectl --server=127.0.0.1:8080 apply -f /tmp/kube-apiserver-to-kubelet_cluster_role_binding.yaml"
  register: kube_apiserver_to_kubelet_cluster_role_binding
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"

- name: Remove temporary files
  file:
    path: "{{item}}"
    state: absent
  with_items:
    - "/tmp/kube-apiserver-to-kubelet_cluster_role.yaml"
    - "/tmp/kube-apiserver-to-kubelet_cluster_role_binding.yaml"
  run_once: true
  delegate_to: "{{groups.kubernetes_controller|first}}"
